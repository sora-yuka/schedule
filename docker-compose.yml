x-postgres-variables: &postgres-variables
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}

x-server-variables: &server-variables
  SECRET_KEY: ${SECRET_KEY}
  DEBUG: ${DEBUG}
  ALLOWED_HOSTS: ${ALLOWED_HOSTS}
  DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  REDIS_HOST: redis
  CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}

x-client-variables: &client-variables
  VITE_API_ENDPOINT: http://localhost:8000/api/v1/
  VITE_WS_ENDPOINT: ws://172.20.0.5:8000/ws/chat/


services:
  postgres:
    image: postgres:16.6
    container_name: postgres
    environment: *postgres-variables
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    
  redis:
    image: redis:8.0-M03-alpine
    container_name: redis
    ports:
      - "6377:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    
  server:
    build:
      context: ./student-schedule__server
    container_name: server
    environment: *server-variables
    ports:
      - "8000:8000"
    volumes:
      - ./media:/app/media
    depends_on: # it guaranteed that other service will run before this one.
    # to run depended service after it's ready, you should use 'condition: service_healthy'
      postgres:
        condition: service_healthy 
      redis:
        condition: service_healthy

  client:
    build:
      context: ./student-schedule__client
    container_name: client
    environment: *client-variables
    ports:
      - "8080:8080"
    networks:
      custom_network:
        ipv4_address: 172.20.0.5

networks:
  custom_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1